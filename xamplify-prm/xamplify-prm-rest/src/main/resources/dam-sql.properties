listAssetsQuery =  ${listUtilQuery} d.parent_id is null and d.company_id = :companyId

listAssetsQueryExcludeBeePDF = \and is_bee_template = false 


#listAssetsQuery =  select  ${idString},${assetNameString},${createdTimeString},${updatedTimeString},${aliasString},${assetTypeString},${thumbnailPathString},${publishedString},${pagesizeString},${pageOrientationStrig}, \
#${beeTemplateString},${templateVersionString}, ${statusString}, ${fullNameString},${emailIdString} from (select d.id as ${idString},d.asset_name as ${assetNameString},d.created_time as \
#${createdTimeString},d.updated_time as  ${updatedTimeString}, d.alias as ${aliasString},d.asset_type as ${assetTypeString}, d.thumbnail_path as ${thumbnailPathString},d.is_published as ${publishedString}, \
#d.page_size as  ${pagesizeString}, d.page_orientation as ${pageOrientationStrig}, d.is_bee_template as ${beeTemplateString}, d.version as ${templateVersionString}, \
# d.asset_status as ${statusString},concat(u.firstname, ' ', u.lastname) as ${fullNameString}, u.email_id as ${emailIdString},case when d.is_bee_template = true and d."version" is null then 'version1' \
#when  d.is_bee_template = true and d."version" is not null then 'versions' when d.is_bee_template = true and d.is_published = true then 'published' \
# else 'others' end as condition from xt_dam d,xt_user_profile u where d.created_by = u.user_id and d.company_id = :companyId    \
 
listAssetsQuerySuffix = ) as cte where condition in ('version1','others')


createdTimeOrderByQuery = \order by d.created_time
publishedTimeOrderByQuery = \order by d.published_time
assetNameOrderByQuery = \order by d.asset_name
updatedTimeOrderByQuery = \order by d.updated_time
assetNameString = \"assetName\"
aliasString = \"alias\"
assetTypeString =   \"assetType\"
assetPathString = \"assetPath\"
thumbnailPathString = \"thumbnailPath\"
idString = \"id\"
pagesizeString = \"pageSize\"
pageOrientationStrig = \"pageOrientation\"
beeTemplateString = \"beeTemplate\"
descriptionString = \"description\"
createdTimeString = \"createdTime\"
updatedTimeString = \"updatedTime\"
publishedString = \"published\"
templateVersionString = \"templateVersion\"
statusString = \"status\"
assetPathString = "\assetPath\"

listAssetsSearchQuery = \and ( LOWER(d.asset_name) like LOWER('%searchKey%') or LOWER(u.email_id) like LOWER('%searchKey%') or LOWER(u.firstname) like LOWER('%searchKey%')  \
or LOWER(u.lastname) like LOWER('%searchKey%') or LOWER(d.asset_type) like LOWER('%searchKey%')  )


hasHistoryQuery = select case when count(*)>0 then true else false end as history from xt_dam where parent_id is not null and  parent_id = :id

#hasHistoryQuery = select  parent_id from xt_dam where id = :id


#listAssetsHistoryQuery = ${listUtilQuery} ( d.parent_id = :parentDamId or d.id = :parentDamId)  and d.version is not null and d.company_id = :companyId 

listAssetsHistoryQuery = ${listUtilQuery} d.parent_id is not null and d.parent_id = :parentDamId and d.company_id = :companyId and cat.id = cm.category_id and d.id = cm.dam_id 



listUtilQuery = select d.id as ${idString},d.asset_name as ${assetNameString},d.created_time as \"createdTime\",d.updated_time as  \"updatedTime\", d.alias as ${aliasString}, d.asset_type as ${assetTypeString}, d.thumbnail_path as ${thumbnailPathString}, d.asset_path as ${assetPathString},  \
d.page_size as ${pagesizeString}, d.page_orientation as ${pageOrientationStrig}, d.is_bee_template as ${beeTemplateString}, d.version as \"templateVersion\", d.asset_status as \"status\",  concat(u.firstname, ' ', u.lastname) as ${fullNameString}, u.email_id as ${emailIdString}, \
 d.created_by as \"createdBy\",cast(cat.name as text) as \"categoryName\",d.is_publishing_or_white_labeling_in_progress as \"publishingOrWhiteLabelingInProgress\", string_agg(DISTINCT t.tag_name, ',') as  \"tagNamesString\", d.is_publishing_to_partner_list as \"publishingToPartnerList\", d.approval_status as \"approvalStatus\", d.approval_status_updated_by as \"approvalStatusUpdatedBy\", d.approval_status_updated_time as \"approvalStatusUpdatedTimeInString\", d.approval_reference_id as \"approvalReferenceId\", d.is_vendor_signature_required as \"vendorSignatureRequired\", d.is_partner_signature_required as \"partnerSignatureRequired\" from xt_user_profile u,xt_category cat,xt_category_module cm, xt_dam d left join xt_dam_tag dt on d.id=dt.dam_id left join xt_tag t on t.id = dt.tag_id where d.created_by = u.user_id and

getParentIdByChildParentIdQuery = select parent_id from xt_dam where id = :id

downloadAsPdfQuery = select d.asset_name as \"fileName\",d.html_body as \"htmlBody\",c.company_logo as \"companyLogo\",d.created_by as \"createdBy\" from xt_dam d,xt_company_profile c \
where d.alias = :alias and d.company_id = c.company_id 

downloadPublishedAssetAsPdfQuery = select d.asset_name as \"fileName\",dp.html_body as \"htmlBody\", d.page_size as ${pagesizeString}, d.page_orientation as ${pageOrientationStrig},\
 vc.company_logo as \"companyLogo\",pc.company_logo as \"partnerCompanyLogo\",d.created_by as \"createdBy\" from xt_dam_partner dp,xt_company_profile vc,xt_dam d, \
xt_company_profile pc,xt_partnership p where p.id = dp.partnership_id and dp.alias = :alias and vc.company_id = p.vendor_company_id and pc.company_id = p.partner_company_id and d.id = dp.dam_id


listPublishedPartnersQuery = select distinct dp.id as ${idString},  p.id as \"partnershipId\", p.partner_id as \"partnerId\",u.email_id as ${emailIdString},concat(uul.firstname, ' ', uul.lastname) as \"fullName\", \
coalesce(uul.firstname,'')  as ${firstNameString}, coalesce(uul.lastname,'')  as ${lastNameString}, coalesce(uul.contact_company,'')  as ${contactCompanyString},p.created_time as \"partnershipCreatedOn\" \
from xt_partnership p left join xt_dam_partner dp on dp.partnership_id = p.id left join xt_user_userlist uul on uul.user_id = p.partner_id left join xt_user_list ul on uul.user_list_id = ul.user_list_id \
left join xt_user_profile u on u.user_id = p.partner_id where p.vendor_company_id = :vendorCompanyId and p.status = 'approved' and ul.is_default_partnerlist and  ul.company_id = :vendorCompanyId \
 
 
 
 #List Partners
listPartnersUtilQuery = select distinct p.id as \"partnershipId\", p.partner_id as \"partnerId\",u.email_id as ${emailIdString},concat(uul.firstname, ' ', uul.lastname) as \"fullName\", \
coalesce(uul.firstname,'')  as ${firstNameString}, coalesce(uul.lastname,'')  as ${lastNameString}, coalesce(uul.contact_company,'')  as ${contactCompanyString},p.created_time as \"partnershipCreatedOn\" from xt_partnership p,xt_user_list ul,xt_user_profile u,xt_user_userlist uul where p.vendor_company_id = :vendorCompanyId and p.status = 'approved' and ul.is_default_partnerlist and  \
ul.company_id = :vendorCompanyId  and uul.user_list_id = ul.user_list_id and uul.user_id = p.partner_id and u.user_id = p.partner_id 

partnershipIdNotInQuery =  and p.id not in (:partnershipIds)

partnershipIdInQuery =  and p.id  in (:partnershipIds) and dp.dam_id = :damId and dp.partnership_id = p.id



listPartnersUtilSearchQuery = \and ( LOWER(uul.contact_company) like LOWER('%searchKey%') or LOWER(u.email_id) like LOWER('%searchKey%') or LOWER(uul.firstname) like LOWER('%searchKey%')  \
or LOWER(uul.lastname) like LOWER('%searchKey%'))

parntershipCreatedOnUtilSortQuery = \order by p.created_time \

partnerCompanyNameUtilSortQuery = \order by ${contactCompanyString} \

partnerEmailIdUtilSortQuery = \order by ${emailIdString} \

partnerFistNameUtilSortQuery = \order by ${firstNameString} \

partnerLastNameUtilSortQuery = \order by ${lastNameString} \

#List Published Assets
listPublishedAssetsQuery = select dp.id as ${idString},dp.is_partner_group_selected as "\publishedToPartnerGroup\",d.asset_name as ${assetNameString},dp.alias as ${aliasString}, d.asset_type as ${assetTypeString}, d.thumbnail_path as ${thumbnailPathString},d.is_bee_template as \"beeTemplate\",\
dp.published_time as \"publishedTime\" ,d.asset_status as \"status\",concat(u.firstname, ' ', u.lastname)as ${fullNameString},u.email_id as ${emailIdString},c.company_name as \"vendorCompanyName\" \
from xt_dam_partner dp,xt_dam d,xt_partnership p,xt_user_profile u,xt_company_profile c,xt_dam_partner_group_mapping dpgm,xt_dam_partner_mapping dpm where p.id = dp.partnership_id and p.vendor_company_id = c.company_id \
and p.partner_company_id = :partnerCompanyId and dp.published_by = u.user_id and dp.dam_id = d.id and ( dp.id = dpm.dam_partner_id  and dpm.partner_id = :partnerId or dp.id = dpgm.dam_partner_id) 

listPublishedAssetsGroupByQuery = group by 1,2,3,4,5,6,7,8,9,10,11,12,d.published_time


#Get Published Asset By Id
getPublishedAssetByIdQuery = select d.id as ${idString},d.html_body as \"htmlBody\",d.json_body as \"jsonBody\", \
vc.company_logo as \"vendorCompanyLogo\", pc.company_logo as \"partnerCompanyLogo\" from xt_dam_partner d,xt_company_profile vc,xt_company_profile pc,xt_partnership p where p.id = d.partnership_id \
and vc.company_id = p.vendor_company_id and pc.company_id = p.partner_company_id and d.id = :id

getSharedAssetDetailsByIdQuery = select dp.id as ${idString}, d.asset_name as ${assetNameString},d.description as ${descriptionString},dp.alias as ${aliasString},dp.published_time as  \"publishedTime\",case when d.video_id is null then d.thumbnail_path else v.image_uri end as ${thumbnailPathString},d.is_bee_template as \"beeTemplate\", d.id as \"damId\", \
case when d.video_id is null then null else v.video_id end as \"videoId\", d.is_partner_signature_required as \"partnerSignatureRequired\", dp.shared_asset_path as \"sharedAssetPath\", dp.is_partner_signature_completed as \"partnerSignatureCompleted\", d.is_vendor_signature_completed as \"vendorSignatureCompleted\", d.asset_path as \"assetPath\", d.asset_type as \"assetType\" from xt_dam d left join xt_dam_partner dp on d.id = dp.dam_id left join v_manage_videos v on v.video_id =d.video_id where dp.id = :id \


listDamAnalyticsQuery = select da.action_type as \"actionType\",da.action_time as \"actionTime\",gla.device_type as \"deviceType\",gla.os as \"os\",gla.city as \"city\", \
gla.state as \"state\",gla.country as \"country\",gla.country_code as \"countryCode\" from xt_dam_analytics da,xt_geo_location_analytics gla where da.id = gla.dam_analytics_id and da.dam_partner_mapping_fk_id \
 =  (select id from xt_dam_partner_mapping where dam_partner_id = :damPartnerId and partner_id = :partnerId)
 
listPartnerGroupDamAnalyticsQuery = select da.action_type as \"actionType\",da.action_time as \"actionTime\",gla.device_type as \"deviceType\",gla.os as \"os\",gla.city as \"city\", \
gla.state as \"state\",gla.country as \"country\",gla.country_code as \"countryCode\" from xt_dam_analytics da,xt_geo_location_analytics gla where da.id = gla.dam_analytics_id and  \
da.dam_partner_fk_id = :damPartnerId and da.action_performed_by = :partnerId 


listDamAnalyticsSearchQuery = \and (LOWER(gla.device_type) like LOWER('%searchKey%') or LOWER(gla.os) like LOWER('%searchKey%')  \
or LOWER(gla.city) like LOWER('%searchKey%') or LOWER(gla.state) like LOWER('%searchKey%') or LOWER(gla.country) like LOWER('%searchKey%') or LOWER(gla.country_code) like LOWER('%searchKey%') )

listDamAnalyticsSortQuery = order by \"actionTime\"


showPartnerDetailsWithAnalyticsCountQuery = select count(distinct case when action_type = 'VIEW' then id end) as "viewCount", \
count(distinct case when action_type = 'DOWNLOAD' then id end) as "downloadCount" from xt_dam_analytics where dam_partner_mapping_fk_id =  \
(select id from xt_dam_partner_mapping where dam_partner_id = :damPartnerId and partner_id =:partnerId)



listPublishedPartnersWithAnalyticsCountQuery = select dp.id as \"damPartnerId\",  u.email_id as ${emailIdString},coalesce(uul.firstname,'')  as ${firstNameString}, coalesce(uul.lastname,'')  as ${lastNameString}, coalesce(uul.contact_company,'')  as ${contactCompanyString},\
 concat(uul.firstname, ' ', uul.lastname) as \"fullName\",count(distinct case when da.action_type = 'VIEW' then da.id end) as "viewCount", \
count(distinct case when da.action_type = 'DOWNLOAD' then da.id end) as "downloadCount" \
from xt_partnership p left join xt_dam_partner dp on p.id = dp.partnership_id \
left join xt_dam_analytics da on da.dam_partner_id = dp.id left join xt_user_list ul on ul.company_id = p.vendor_company_id \
left join xt_user_userlist uul on uul.user_list_id = ul.user_list_id and uul.user_id = p.partner_id left join xt_user_profile u on u.user_id = p.partner_id \
where ul.is_default_partnerlist = true and p.vendor_company_id = :vendorCompanyId and p.id in (:partnershipIds) and dp.dam_id = :damId

listPublishedPartnersWithAnalyticsCountGroupQuery = group by dp.id, u.email_id,uul.firstname,uul.lastname,uul.contact_company,p.created_time

viewsCountOrderByQuery = order by \"viewCount\"

downloadCountOrderByQuery = order by \"downloadCount\" 


#FindPartnerCompanies
partnerCompaniesQueryDeperecated = select  p.id AS \"partnershipId"\, p.partner_company_id as \"partnerCompanyId\", p.vendor_company_id as \"vendorCompanyId\",COALESCE(uul.contact_company, '') AS \"companyNameAddedByVendor\", \
  p.created_time as \"createdTime\",c.company_logo  as \"companyLogo\",c.company_name as \"companyName\",c.company_id as \"companyId\"  FROM xt_partnership p,    xt_user_list ul,    xt_user_profile u,    xt_user_userlist uul,	xt_company_profile c \
  WHERE p.status = 'approved' AND ul.is_default_partnerlist   AND uul.user_list_id = ul.user_list_id AND uul.user_id = p.partner_id \
  AND u.user_id = p.partner_id AND p.partner_company_id IS NOT NULL   AND p.vendor_company_id = ul.company_id and c.company_id = p.partner_company_id and p.vendor_company_id = :vendorCompanyId \
  and u.company_id = p.partner_company_id and u.status in ('APPROVE','DECLINE','SUSPEND') 
  
  #FindPartnerCompanies
partnerCompaniesQuery = select  p.id AS \"partnershipId"\, p.partner_company_id as \"partnerCompanyId\", p.vendor_company_id as \"vendorCompanyId\", \
COALESCE(uul.contact_company, '') AS \"companyNameAddedByVendor\", p.created_time as \"createdTime\",c.company_logo  as \"companyLogo\", \
c.company_name as \"companyName\",c.company_id as \"companyId\", p.status as \"partnerStatus\" \
FROM  xt_user_list ul, xt_user_profile u,  xt_user_userlist uul,xt_partnership p \
left join xt_company_profile c on c.company_id = p.partner_company_id  left join xt_team_member t on t.company_id = p.partner_company_id \
WHERE p.status in ('approved', 'deactivated') AND ul.is_default_partnerlist   AND uul.user_list_id = ul.user_list_id AND uul.user_id = p.partner_id \
AND p.partner_company_id IS NOT NULL  AND p.vendor_company_id = ul.company_id  and p.vendor_company_id = :vendorCompanyId \
and u.company_id = p.partner_company_id and u.status in ('APPROVE','DECLINE','SUSPEND') 
 
partnerCompaniesSearchQuery = \ and (uul.contact_company ilike '%searchKey%' or u.firstname ilike '%searchKey%' or u.lastname ilike '%searchKey%' \
or u.email_id ilike '%searchKey%' or c.company_name ilike '%searchKey%' or REPLACE((u.firstname || u.lastname), ' ', '') ilike REPLACE('%searchKey%', ' ', '') \
or REPLACE((u.lastname || u.firstname), ' ', '') ilike REPLACE('%searchKey%', ' ', ''))  
 
partnerCompaniesQueryGroupBy = \ group by p.id, uul.contact_company,c.company_id
 
 #TeamMembers/Admins Query
teamMembersAndAdminQuery = select  u.user_id as \"userId\",u.email_id as \"emailId\",COALESCE(u.firstname,'') as \"firstName\",COALESCE(u.lastname,'') as \"lastName\", \
u.company_id as \"companyId\",u.status as \"status\"  from xt_user_profile u where  u.email_id is not null \
and u.status in ('APPROVE','DECLINE','SUSPEND') and u.company_id is not null  and u.company_id = :companyId


teamMembersAndAdminSerachQuery = \and ( LOWER(u.email_id) like LOWER('%searchKey%') OR LOWER(u.firstname) like LOWER('%searchKey%') OR LOWER(u.lastname) like LOWER('%searchKey%') \
or REPLACE((u.firstname || u.lastname), ' ', '') ilike REPLACE('%searchKey%', ' ', '') or REPLACE((u.lastname || u.firstname), ' ', '') ilike REPLACE('%searchKey%', ' ', '') )



==================
#FindPartnerGroups
partnerGroupsQuerySelect = select xul.user_list_id as \"id\" ,xul.user_list_name as \"groupName\",xul.created_time as \"createdTime\" \

partnerGroupsQueryFrom = \ from xt_user_list xul, xt_user_userlist xuu, xt_user_profile u where xul.user_list_id = xuu.user_list_id and xuu.user_id = u.user_id \
and xul.is_partner_userlist and xul.company_id = :companyId and xul.user_list_name not in (:activeAndInactivePartnerList) \

#\and ( LOWER(xul.user_list_name) like LOWER('%searchKey%') )

partnerGroupsSearchQuery = \ and (xul.user_list_name ilike '%searchKey%' or xuu.firstname ilike '%searchKey%' or xuu.lastname ilike '%searchKey%' \
or xuu.contact_company ilike '%searchKey%' or xuu.mobile_number ilike '%searchKey%' or u.email_id ilike '%searchKey%' or xuu.job_title ilike '%searchKey%' \
or xuu.address ilike '%searchKey%' or REPLACE((xuu.firstname || xuu.lastname), ' ', '') ilike REPLACE('%searchKey%', ' ', '') \
or REPLACE((xuu.lastname || xuu.firstname), ' ', '') ilike REPLACE('%searchKey%', ' ', '')) 

partnerGroupsGroupByQuery =  \ group by xul.user_list_id,xul.user_list_name

partnerGroupsCountQuerySelect =  SELECT xul.user_list_id as \"id\",  count(distinct xuu.user_id) AS \"count\" 


showPartnerDetailsWithAnalyticsCountForPartnerCompanyQuery = select count(distinct case when action_type = 'VIEW' then id end) as "viewCount", \
count(distinct case when action_type = 'DOWNLOAD' then id end) as "downloadCount" from xt_dam_analytics \
where dam_partner_fk_id = :damPartnerId and action_performed_by = :partnerId  \


listPublishedAssetsParnterGroupQueryPrefix =  SELECT dp.id AS \"id\", p.partner_company_id as \"partnerCompanyId\", p.partner_id as \"partnerId\", p.vendor_company_id as \"vendorCompanyId\",\
d.asset_name as \"assetName\", dp.alias as \"alias\",d.asset_type \"assetType\",d.thumbnail_path as \"thumbnailPath\", d.is_bee_template as \"beeTemplate\", d.published_time as \"publishedTime\",  \
d.asset_status AS \"status\", concat(u.firstname, ' ', u.lastname) AS \"displayName\",u.email_id as \"emailId\",c.company_name as \"vendorCompanyName\" FROM xt_dam_partner dp, \
xt_dam d, xt_partnership p, xt_user_profile u, xt_company_profile c, xt_dam_partner_group_mapping dpgm WHERE p.id = dp.partnership_id AND p.vendor_company_id = c.company_id AND \
dp.published_by = u.user_id AND dp.dam_id = d.id AND dp.id = dpgm.dam_partner_id and   \

listPublishedAssetsParnterGroupQuerySuffix = p.partner_company_id = :partnerCompanyId \

listPublishedAssetsParnterGroupVanityQuerySuffix = p.partner_company_id = :partnerCompanyId and p.vendor_company_id = :vendorCompanyId \

listPublishedAssetsParnterQueryPrefix = UNION   SELECT dp.id AS \"id\", p.partner_company_id as \"partnerCompanyId\", p.partner_id as \"partnerId\", p.vendor_company_id as \"vendorCompanyId\",\
d.asset_name as \"assetName\", dp.alias as \"alias\",d.asset_type \"assetType\",d.thumbnail_path as \"thumbnailPath\", d.is_bee_template as \"beeTemplate\", d.published_time as \"publishedTime\",  \
d.asset_status AS \"status\", concat(u.firstname, ' ', u.lastname) AS \"displayName\",u.email_id as \"emailId\",c.company_name as \"vendorCompanyName\"     FROM xt_dam_partner dp,   xt_dam d,       xt_partnership p,     xt_user_profile u,   xt_company_profile c,  xt_dam_partner_mapping dpm \
WHERE p.id = dp.partnership_id AND p.vendor_company_id = c.company_id AND dp.published_by = u.user_id \
AND dp.dam_id = d.id AND dp.id = dpm.dam_partner_id and  \

listPublishedAssetsParnterVanityQuerySuffix  = p.vendor_company_id = :vendorCompanyId and dpm.partner_id = :partnerId

listPublishedAssetsParnterQuerySuffix  =  dpm.partner_id = :partnerId

listPublishedAssetsSearchQuery = \ and ( LOWER(d.asset_name) like LOWER('%searchKey%') )

#ListAssetsWithTags
listAssetQuery =  ${listAssetTagsQuery} ${listAssetUtilQuery} ${listAssetJoinQuery} 

listAssetUtilQuery = \dam AS(select distinct d.id, \
case when d.video_id is null then d.asset_name else v.title end as asset_name, \
case when d.video_id is null then d.created_time else v.uploaded_time end as created_time, \
case when d.video_id is null then d.updated_time else v.uploaded_time end as updated_time, \
case when d.video_id is null then d.thumbnail_path else v.image_uri end as thumbnail_path, \
case when d.video_id is null then d.asset_path  else v.videouri end as asset_path, \
case when d.video_id is null then d.created_by  else v.customer_id end as created_by, \
case when d.video_id is null then d.alias else v.video_alias end as alias, \
case when d.video_id is null then null else v.view_by end as view_by, \
case when d.video_id is null then null else v.video_id end as video_id, \
case when d.video_id is null then null else v.video_length end as video_length, \
case when d.video_id is null then null else v.views end as total_views, \
case when d.video_id is null then false else v.is_processed end as is_processed, \
d.approval_status, d.approval_status_updated_by, d.approval_status_updated_time, d.is_published, d.approval_reference_id, \
d.asset_type, d.page_size, d.page_orientation, d.is_bee_template, d.version,d.asset_status, d.is_white_labeled_asset_shared_with_partners,d.is_publishing_or_white_labeling_in_progress, d.is_publishing_to_partner_list, d.is_vendor_signature_required, d.is_partner_signature_required,  u.firstname, u.lastname, u.email_id, \
d.company_id, d.open_ai_file_id, d.created_for_company from xt_dam d  publishedCondition  {approvedAndUnPublsihedFilterJoinQuery} LEFT JOIN v_manage_videos v on v.video_id =d.video_id LEFT JOIN xt_user_profile u ON \
u.user_id = case when d.video_id is null then d.created_by else v.customer_id end \
 LEFT JOIN  xt_dam_tag dt ON dt.dam_id=d.id LEFT JOIN xt_tag t on t.id=dt.tag_id where d.parent_id is null unPublishedCondition {approvedAndUnPublsihedFilterCondition}\
)

listAssetTagsQuery = WITH tag AS (SELECT d.id as \"dam_id\", case when d.video_id is null then string_agg(DISTINCT t.tag_name, ',') else string_agg(DISTINCT vt.video_tags, ',') end \
 AS \"tag_names_string\" FROM xt_dam d LEFT JOIN public.xt_dam_tag dt on dt.dam_id=d.id LEFT JOIN xt_tag t on t.id=dt.tag_id \
LEFT JOIN  xt_video_files v on v.id =d.video_id LEFT JOIN xt_video_tags vt on v.id = vt.video_id GROUP BY d.id ),

listAssetJoinQuery = \SELECT d.id as ${idString},d.asset_name as ${assetNameString},d.created_time as \"createdTime\",d.updated_time as  \"updatedTime\", d.alias as ${aliasString}, d.asset_type as ${assetTypeString}, d.thumbnail_path as ${thumbnailPathString}, d.asset_path as ${assetPathString}, d.approval_status as \"approvalStatus\", d.approval_status_updated_by as \"approvalStatusUpdatedBy\", d.approval_status_updated_time as \"approvalStatusUpdatedTimeInString\", d.approval_reference_id as \"approvalReferenceId\", \
d.page_size as ${pagesizeString}, d.page_orientation as ${pageOrientationStrig}, d.is_bee_template as ${beeTemplateString}, d.version as \"templateVersion\", d.asset_status as \"status\",  concat(d.firstname, ' ', d.lastname) as ${fullNameString}, d.email_id as ${emailIdString}, d.created_by as \"createdBy\",d.view_by as \"viewBy\",d.video_id as \"videoId\", \
 d.video_length as \"videoLength\", d.total_views as \"totalViews\", d.is_processed as \"isProcessed\", d.is_white_labeled_asset_shared_with_partners as \"whiteLabeledAssetSharedWithPartners\",d.is_publishing_or_white_labeling_in_progress as \"publishingOrWhiteLabelingInProgress\", d.is_publishing_to_partner_list as \"publishingToPartnerList\", d.is_partner_signature_required as \"partnerSignatureRequired\", d.is_vendor_signature_required as \"vendorSignatureRequired\", t.tag_names_string as \"tagNamesString\", cast(cat.name as text) as \"categoryName\" \
 FROM xt_category cat,xt_category_module cm, dam d LEFT JOIN tag t on d.id=t.dam_id {recived_from_filter_query} where  cat.id = cm.category_id and cm.dam_id = d.id {category_filter} and d.company_id = :companyId {partner_query}  \
 {asset_filter_type_merge_tag} {list_search_query} {exclude_bee_template} {asset_approval_status_type_merge_tag}

listSearchQuery = \and ( LOWER(d.asset_name) like LOWER('%searchKey%') or LOWER(d.email_id) like LOWER('%searchKey%') or LOWER(d.firstname) like LOWER('%searchKey%')  \
or LOWER(d.lastname) like LOWER('%searchKey%') or LOWER(d.asset_type) like LOWER('%searchKey%') or LOWER(t.tag_names_string) like LOWER('%searchKey%') or LOWER(cat.name) like LOWER('%searchKey%')  )

#ListPublishedAssetsWithTags
listPublishedAssetsParnterGroupQuery =  \dam AS(SELECT DISTINCT d.id AS \"dam_id\",dp.id , p.partner_company_id, p.partner_id, p.vendor_company_id, d.asset_path, d.open_ai_file_id, \
d.asset_name, dp.alias,d.asset_type,cast(cat.name as text),case when d.video_id is null then d.thumbnail_path else v.image_uri end as thumbnail_path, d.is_bee_template, d.published_time, d.asset_status, d.is_partner_signature_required, d.is_vendor_signature_required, u.firstname,u.lastname,u.email_id,c.company_name, \
case when d.video_id is null then null else v.video_id end as video_id FROM xt_category cat,xt_category_module cm,xt_dam_partner dp \
 JOIN xt_dam d on dp.dam_id = d.id JOIN xt_partnership p on p.id = dp.partnership_id JOIN  xt_user_profile u on dp.published_by = u.user_id \
 JOIN xt_company_profile c on p.vendor_company_id = c.company_id JOIN xt_dam_partner_group_mapping dpgm on dp.id = dpgm.dam_partner_id LEFT JOIN xt_dam_tag dm on dm.dam_id=d.id LEFT JOIN xt_tag t on t.id=dm.tag_id \
 LEFT JOIN v_manage_videos v on v.video_id =d.video_id LEFT JOIN xt_video_tags vt on v.video_id = vt.video_id interacted1  \
WHERE {listPublishedAssetsParnterGroupQuerySuffix}  {listPublishedAssetsParnterGroupVanityQuerySuffix} and cat.id = cm.category_id and cm.dam_id = d.id  filterConditionWhereFirst  {asset_filter_type_merge_tag} {category_filter} )

listPublishedAssetsSearchQueryWithTags = \ WHERE ( LOWER(d.asset_name) like LOWER('%searchKey%')  or LOWER(t.tag_names_string) like LOWER('%searchKey%') or LOWER(d.name) like LOWER('%searchKey%') or LOWER(d.firstname) like LOWER('%searchKey%') or LOWER(d.lastname)  like LOWER('%searchKey%') )

listPublishedAssetJoinQuery =  \SELECT d.dam_id AS \"damId\",d.id AS \"id\", d.partner_company_id as \"partnerCompanyId\", d.partner_id as \"partnerId\", d.vendor_company_id as \"vendorCompanyId\",\
d.asset_name as \"assetName\", d.alias as \"alias\",d.asset_type \"assetType\",d.thumbnail_path as \"thumbnailPath\", d.is_bee_template as \"beeTemplate\", d.published_time as \"publishedTime\",  \
d.asset_status AS \"status\", concat(d.firstname, ' ', d.lastname) AS \"displayName\",d.email_id as \"emailId\",d.company_name as \"vendorCompanyName\",d.asset_path as \"assetPath\" \
 ,t.tag_names_string as \"tagNamesString\", d.video_id as \"videoId\",d.name as \"categoryName\", d.is_vendor_signature_required as \"vendorSignatureRequired\", d.is_partner_signature_required as \"partnerSignatureRequired\" FROM dam d {custom_join_codition} JOIN tag t on d.dam_id=t.dam_id {listPublishedAssetsSearchQueryWithTags} {custom_filter_option_query}

listPublishedAssetsParnterQuery = \dam AS(SELECT DISTINCT d.id AS \"dam_id\",dp.id , p.partner_company_id, p.partner_id, p.vendor_company_id, d.asset_path,d.open_ai_file_id, \
d.asset_name, dp.alias,d.asset_type,cast(cat.name as text),case when d.video_id is null then d.thumbnail_path else v.image_uri end as thumbnail_path, d.is_bee_template, d.published_time, d.asset_status, d.is_vendor_signature_required, d.is_partner_signature_required, u.firstname, u.lastname,u.email_id,c.company_name, \
case when d.video_id is null then null else v.video_id end as video_id FROM xt_category cat,xt_category_module cm, xt_dam_partner dp JOIN xt_dam d on dp.dam_id = d.id JOIN xt_partnership p on p.id = dp.partnership_id JOIN  xt_user_profile u on dp.published_by = u.user_id \
JOIN xt_company_profile c on p.vendor_company_id = c.company_id JOIN xt_dam_partner_mapping dpm on dp.id = dpm.dam_partner_id  LEFT JOIN xt_dam_tag dm on dm.dam_id=d.id LEFT JOIN xt_tag t on t.id=dm.tag_id \
LEFT JOIN v_manage_videos v on v.video_id =d.video_id  interacted2 LEFT JOIN xt_video_tags vt on v.video_id = vt.video_id \
WHERE  {listPublishedAssetsParnterVanityQuerySuffix}  {listPublishedAssetsParnterQuerySuffix} and cat.id = cm.category_id and cm.dam_id = d.id  filterConditionWhereFirst  {asset_filter_type_merge_tag} {category_filter}) 

listPublishedAssetsParnterQueryUnionPrefix = \ UNION SELECT * FROM ( \

listPublishedAssetsParnterQueryUnionSuffix = \ ) as temp \

listPublishedAssetsParnterGroupCompleteQuery =   ${listAssetTagsQuery} ${listPublishedAssetsParnterGroupQuery} ${listPublishedAssetJoinQuery} 

listPublishedAssetsParnterCompleteQuery =  ${listPublishedAssetsParnterQueryUnionPrefix} ${listAssetTagsQuery} ${listPublishedAssetsParnterQuery} ${listPublishedAssetJoinQuery} ${listPublishedAssetsParnterQueryUnionSuffix}

listPublishedAssetsCompleteQuery =  ${listPublishedAssetsParnterGroupCompleteQuery} ${listPublishedAssetsParnterCompleteQuery} 


#XNFR-125#
oneClickLaunchCampaignPartnerQuery = ${partnerCompaniesQuery} and p.id = :partnershipId

#XNFR-220#
#FindAllPartnerCompanies
allPartnerCompaniesQuery = select  p.id AS \"partnershipId"\, p.partner_company_id as \"partnerCompanyId\", p.vendor_company_id as \"vendorCompanyId\",COALESCE(uul.contact_company, '') AS \"companyNameAddedByVendor\", \
p.created_time as \"createdTime\",c.company_logo  as \"companyLogo\",coalesce(c.company_name,'-') as \"companyName\",c.company_id as \"companyId\"  FROM \
xt_user_list ul,xt_user_userlist uul,xt_user_profile partner,xt_partnership p left join xt_company_profile c on c.company_id = p.partner_company_id where p.vendor_company_id = :vendorCompanyId and p.status = 'approved' \
AND ul.is_default_partnerlist   AND uul.user_list_id = ul.user_list_id AND ul.is_default_partnerlist  AND uul.user_id = p.partner_id and p.vendor_company_id = ul.company_id and p.partner_id = partner.user_id and uul.user_id = partner.user_id 
 
allPartnerCompaniesSearchQuery = \ and (uul.contact_company ilike '%searchKey%'  or c.company_name ilike '%searchKey%') 

 #XNFR-342
findAssetsByIdsQueryString = select d.id as \"id\",d.asset_name as \"assetName\",d.asset_type as \"assetType\",u.user_id as \"createdUserId\",d.created_time as \"createdTime\",CASE WHEN length(trim(concat(trim(u.firstname), ' ', trim(u.lastname)))) > \
0 THEN trim(concat(trim(u.firstname), ' ', trim(u.lastname))) ELSE u.email_id  END AS "createdBy" from xt_user_profile u, xt_dam d where d.company_id= :companyId and u.user_id = d.created_by and d.id in (:ids)
 
damViewAnalyticsForCompaniesQuery = SELECT cp.company_id AS \"companyId\", dp.partnership_id AS \"partnershipId\", dp.id AS \"damPartnerId\", \
cp.company_name AS \"companyName\", cp.company_logo AS \"companyLogo\", \
CAST(COUNT(CASE WHEN da.action_type = 'VIEW' THEN da.id END) AS INT) AS \"viewCount\", \
CAST(COUNT(CASE WHEN da.action_type = 'DOWNLOAD' THEN da.id END) AS INT) AS \"downloadCount\", \
COALESCE(uul.contact_company, '') AS \"contactCompany\", dp.alias AS \"damPartnerAlias\", dp.dam_id AS \"partnerDamId\", \
dp.is_partner_signature_completed AS \"partnerSignatureCompleted\", xp.partner_id AS \"partnerUserId\", \
dp.shared_asset_path AS \"sharedAssetPath\", dp.is_vendor_signature_completed AS \"vendorSignatureCompleted\", \
xp.status AS \"partnerStatus\", d.asset_name AS \"assetName\", d.asset_type AS \"assetType\", \
CONCAT(xup.firstname, ' ', xup.lastname) AS \"createdBy\", dp.published_time AS \"publishedOn\", \
CAST(xc.name AS TEXT) AS \"categoryName\" \
FROM xt_user_list ul, xt_user_userlist uul, xt_company_profile cp, xt_partnership xp, xt_dam_partner dp, xt_dam d, \
xt_user_profile xup, xt_category_module xcm, xt_category xc, xt_dam_partner_mapping dpm \
LEFT JOIN xt_dam_analytics da ON da.dam_partner_mapping_fk_id = dpm.id \
WHERE dp.dam_id = :damId AND dpm.dam_partner_id = dp.id AND dp.dam_id = d.id AND d.created_by = xup.user_id \
AND cp.company_id = xp.partner_company_id AND xp.id = dp.partnership_id AND ul.user_list_id = uul.user_list_id \
AND uul.user_id = xp.partner_id AND xcm.dam_id = d.id AND xc.id = xcm.category_id AND ul.is_default_partnerlist \
AND xp.vendor_company_id = ul.company_id \

damViewAnalyticsForGroupsQuery = SELECT cp.company_id AS \"companyId\", dp.partnership_id AS \"partnershipId\", dp.id AS \"damPartnerId\", \
cp.company_name AS \"companyName\", cp.company_logo AS \"companyLogo\", \
CAST(COUNT(CASE WHEN da.action_type = 'VIEW' THEN da.id END) AS INT) AS \"viewCount\", \
CAST(COUNT(CASE WHEN da.action_type = 'DOWNLOAD' THEN da.id END) AS INT) AS \"downloadCount\", \
COALESCE(uul.contact_company, '') AS \"contactCompany\", dp.alias AS \"damPartnerAlias\", \
dp.dam_id AS \"partnerDamId\", dp.is_partner_signature_completed AS \"partnerSignatureCompleted\", \
xp.partner_id AS \"partnerUserId\", dp.shared_asset_path AS \"sharedAssetPath\", \
dp.is_vendor_signature_completed AS \"vendorSignatureCompleted\", xp.status AS \"partnerStatus\", \
d.asset_name AS \"assetName\", d.asset_type AS \"assetType\", \
CONCAT(xup.firstname, ' ', xup.lastname) AS \"createdBy\", dp.published_time AS \"publishedOn\", \
CAST(xc.name AS TEXT) AS \"categoryName\" \
FROM xt_user_list ul, xt_user_userlist uul, xt_company_profile cp, xt_partnership xp, xt_dam d, \
xt_user_profile xup, xt_category_module xcm, xt_category xc, xt_dam_partner_group_mapping dpgm, xt_dam_partner dp \
LEFT JOIN xt_dam_analytics da ON da.dam_partner_fk_id = dp.id \
WHERE dp.dam_id = :damId \
AND dpgm.dam_partner_id = dp.id \
AND dp.dam_id = d.id AND d.created_by = xup.user_id \
AND cp.company_id = xp.partner_company_id AND xp.id = dp.partnership_id \
AND ul.user_list_id = uul.user_list_id AND uul.user_id = xp.partner_id \
AND xcm.dam_id = d.id AND xc.id = xcm.category_id \
AND ul.is_default_partnerlist AND xp.vendor_company_id = ul.company_id \

damPartnerAnalyticsForCompaniesQuery = SELECT  d.id AS \"damId\", dp.id AS \"damPartnerId\", u.user_id as \"userId\", \
p.partner_id as \"partnerId\", p.id AS \"partnershipId\", u.email_id as \"emailId\", \
d.asset_name as \"assetName\",d.asset_type as \"assetType\",max(dp.published_time) as \"publishedOn\",concat(u1.firstname, ' ', u1.lastname) as \"createdBy\", \
case WHEN u.user_id = p.partner_id THEN COALESCE(uul.firstname, '') ELSE u.firstname END AS \"firstName\", \
case WHEN u.user_id = p.partner_id THEN COALESCE(uul.lastname, '') ELSE u.lastname END AS \"lastName\", \
CASE WHEN u.user_id = p.partner_id THEN concat(uul.firstname, ' ', uul.lastname) \
ELSE concat(u.firstname, ' ', u.lastname) END AS \"fullName\", xcp.company_name AS \"companyName\", \
cast(count(distinct case WHEN da.action_type = 'VIEW' THEN da.id ELSE NULL END) as int) AS \"viewCount\", \
cast(count(distinct CASE WHEN da.action_type = 'DOWNLOAD' THEN da.id ELSE null END) as int) AS \"downloadCount\" \
FROM xt_dam_partner dp, xt_partnership p, xt_user_profile u,xt_company_profile xcp,xt_user_profile u1,xt_user_list ul, xt_user_userlist uul, \
xt_dam d,xt_dam_partner_mapping dpm left join xt_dam_analytics da on da.dam_partner_mapping_fk_id = dpm.id \
WHERE dp.id = dpm.dam_partner_id AND p.id = dp.partnership_id AND u.user_id = dpm.partner_id \
AND ul.company_id = p.vendor_company_id AND uul.user_list_id = ul.user_list_id and xcp.company_id = u.company_id and u1.user_id = d.created_by \
AND uul.user_id = p.partner_id  AND ul.is_default_partnerlist AND d.id = dp.dam_id \
and dp.id = :damPartnerId \


damPartnerAnalyticsForGroupsQuery = SELECT d.id AS \"damId\", dp.id AS \"damPartnerId\", u.user_id AS \"userId\", p.partner_id AS \"partnerId\", \
p.id AS \"partnershipId\", u.email_id AS \"emailId\", d.asset_name AS \"assetName\", d.asset_type AS \"assetType\", \
MAX(dp.published_time) AS \"publishedOn\", CONCAT(up.firstname, ' ', up.lastname) AS \"createdBy\", \
CASE WHEN u.user_id = p.partner_id THEN COALESCE(uul.firstname, '') ELSE u.firstname END AS \"firstName\", \
CASE WHEN u.user_id = p.partner_id THEN COALESCE(uul.lastname, '') ELSE u.lastname END AS \"lastName\", \
CASE WHEN u.user_id = p.partner_id THEN CONCAT(uul.firstname, ' ', uul.lastname) ELSE CONCAT(u.firstname, ' ', u.lastname) END AS \"fullName\", \
xcp.company_name AS \"companyName\", \
CAST(COUNT(DISTINCT CASE WHEN da.action_type = 'VIEW' THEN da.id ELSE NULL END) AS INT) AS \"viewCount\", \
CAST(COUNT(DISTINCT CASE WHEN da.action_type = 'DOWNLOAD' THEN da.id ELSE NULL END) AS INT) AS \"downloadCount\" \
FROM xt_dam_partner dp \
JOIN xt_dam d ON d.id = dp.dam_id \
JOIN xt_partnership p ON p.id = dp.partnership_id \
JOIN xt_dam_partner_group_mapping dpgm ON dpgm.dam_partner_id = dp.id \
JOIN xt_dam_partner_group_user_mapping dpgu ON dpgu.dam_partner_group_id = dpgm.id \
LEFT JOIN xt_team_member tm ON tm.id = dpgu.team_member_id \
LEFT JOIN xt_user_profile u ON u.user_id = COALESCE(tm.team_member_id, dpgu.user_id) left join xt_company_profile xcp on xcp.company_id= u.company_id \
LEFT JOIN xt_user_list ul ON ul.company_id = p.vendor_company_id AND ul.is_default_partnerlist = TRUE \
LEFT JOIN xt_user_userlist uul ON uul.user_id = p.partner_id AND uul.user_list_id = ul.user_list_id \
LEFT JOIN xt_dam_analytics da ON da.dam_partner_fk_id = dp.id AND da.action_performed_by = u.user_id \
LEFT JOIN xt_user_profile up ON up.user_id = d.created_by \
WHERE dp.id = :damPartnerId \

damViewAnalyticsForCompaniesSheet2Query = select cp.company_id as "companyId", \
dp.partnership_id as "partnershipId", dp.id as "damPartnerId", cp.company_name as "companyName", \
cp.company_logo as "companyLogo",cast(COUNT(case when da.action_type = 'VIEW' then da.id end) as INT) as "viewCount", \
cast(COUNT(case when da.action_type = 'DOWNLOAD' then da.id end) as INT) as "downloadCount", \
coalesce(uul.contact_company, '') as "contactCompany", dp.alias as "damPartnerAlias", \
dp.dam_id as "partnerDamId", dp.is_partner_signature_completed as "partnerSignatureCompleted", \
xp.partner_id as "partnerUserId", dp.shared_asset_path as "sharedAssetPath", \
dp.is_vendor_signature_completed as "vendorSignatureCompleted",	xp.status as "partnerStatus", \
d.asset_name as "assetName", d.asset_type as "assetType", CONCAT(xup.firstname, ' ', xup.lastname) as "createdBy", \
CONCAT(xup1.firstname, ' ', xup1.lastname) as "partnerName", dp.published_time as "publishedOn", \
cast(xc.name as TEXT) as "categoryName", xup1.email_id as "emailId" \
from xt_user_list ul, xt_user_userlist uul, xt_company_profile cp, xt_partnership xp, xt_dam_partner dp, xt_dam d, xt_user_profile xup, \
xt_user_profile xup1, xt_category_module xcm, xt_category xc, xt_dam_partner_mapping dpm left join xt_dam_analytics da on \
da.dam_partner_mapping_fk_id = dpm.id where	dp.dam_id = :damId and dpm.dam_partner_id = dp.id \
and dp.dam_id = d.id and d.created_by = xup.user_id	and cp.company_id = xp.partner_company_id and xp.id = dp.partnership_id \
and ul.user_list_id = uul.user_list_id and uul.user_id = xp.partner_id and dpm.partner_id = xup1.user_id and xcm.dam_id = d.id \
and xc.id = xcm.category_id and ul.is_default_partnerlist and xp.vendor_company_id = ul.company_id \

damViewAnalyticsForGroupsSheet2Query =select distinct cp.company_id as "companyId", dp.partnership_id as "partnershipId", \
dp.id as "damPartnerId",cp.company_name as "companyName",cp.company_logo as "companyLogo", \
cast(COUNT(case when da.action_type = 'VIEW' then da.id end) as INT) as "viewCount", \
cast(COUNT(case when da.action_type = 'DOWNLOAD' then da.id end) as INT) as "downloadCount", \
coalesce(uul.contact_company, '') as "contactCompany", dp.alias as "damPartnerAlias", \
dp.dam_id as "partnerDamId",dp.is_partner_signature_completed as "partnerSignatureCompleted", \
xp.partner_id as "partnerUserId",dp.shared_asset_path as "sharedAssetPath", \
dp.is_vendor_signature_completed as "vendorSignatureCompleted", \
xp.status as "partnerStatus",d.asset_name as "assetName",d.asset_type as "assetType", \
CONCAT(xup.firstname, ' ', xup.lastname) as "createdBy",CONCAT(xup1.firstname, ' ', xup1.lastname) as "partnerName",xup1.email_id as "emailId", \
dp.published_time as "publishedOn",cast(xc.name as TEXT) as "categoryName" from \
xt_user_list ul,xt_user_userlist uul,xt_company_profile cp,xt_partnership xp,xt_dam d, \
xt_user_profile xup,xt_category_module xcm,xt_category xc,xt_dam_partner_group_mapping dpgm \
left join xt_dam_partner dp on dpgm.dam_partner_id = dp.id \
left JOIN xt_dam_partner_group_user_mapping dpgu ON dpgu.dam_partner_group_id = dpgm.id \
LEFT JOIN xt_team_member tm ON tm.id = dpgu.team_member_id \
LEFT JOIN xt_user_profile xup1 ON xup1.user_id = tm.team_member_id or xup1.user_id= dpgu.user_id \
left join xt_dam_analytics da on da.dam_partner_fk_id = dp.id  and  da.action_performed_by = xup1.user_id \
where dp.dam_id = :damId and dp.dam_id = d.id and d.created_by = xup.user_id \
and cp.company_id = xp.partner_company_id and xp.id = dp.partnership_id and ul.user_list_id = uul.user_list_id \
and uul.user_id = xp.partner_id and xcm.dam_id = d.id and xc.id = xcm.category_id \
and ul.is_default_partnerlist and xp.vendor_company_id = ul.company_id \