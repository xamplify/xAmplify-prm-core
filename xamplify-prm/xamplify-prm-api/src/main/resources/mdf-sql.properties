#############MDF Details#####################
#Properties
contactCompanyString = \"contactCompany\"
emailIdString = \"emailId\"
firstNameString = \"firstName\"
lastNameString = \"lastName\"
fullNameString = \"fullName\"
partnershipCreatedOn = \"partnershipCreatedOn\"
mdfAmountAdded = xmdh.mdf_amount_type='FUND_ADDED' 
mdfAmountRemoved = xmdh.mdf_amount_type='FUND_REMOVED' 
totalBalance = \"totalBalance\"
usedBalance = \"usedBalance\"
availableBalance =  \"availableBalance\"
mdfDetailsId = "\mdfDetailsId\"
profilePicturePath = "\profilePicturePath\"
mdfAmount = "\mdfAmount\"
allocationDate = "\allocationDate\"
expirationDate = "\expirationDate\"
mdfAmountType = "\mdfAmountType\"
description = "\description\"
createdTime = "\createdTime\"
creatorEmailId = \"creatorEmailId\"
creatorFullName = \"creatorFullName\"
creatorProfilePicturePath = \"creatorProfilePicturePath\"
updaterEmailId = \"updaterEmailId\"
updaterFullName = \"updaterFullName\"
updaterProfilePicturePath = \"updaterProfilePicturePath\"
updatedTime = \"updatedTime\"
fileName = \"fileName\"
filePathAlias = \"filePathAlias\"
uploadedTime = \"uploadedTime\"
fullNameContact = concat(u.firstname, ' ', u.lastname)
partnershipIdString = \"partnershipId\"
requestCreatedByString = \"requestCreatedBy\"
userIdString = \"userId\"



#Vendor Mdf Amount Tiles Query
vendorMdfAmountTilesInfoQuery = with a as(select xp.vendor_company_id,count(distinct partner_company_id) partners \
,sum(case when ${mdfAmountAdded}  then xmdh.mdf_amount else 0 end) - sum(case when ${mdfAmountRemoved}  then xmdh.mdf_amount else 0 end) as mdf_amount \
from xt_partnership xp left join xt_mdf_details xmd on xmd.partnership_id = xp.id left join xt_mdf_details_history xmdh on xmdh.mdf_details_id = xmd.id where xp.status = 'approved' \
group by  xp.vendor_company_id),b as (select xp.vendor_company_id ,sum(xmrh.reimburse_amount) reimburse_amount,sum(xmrh.allocation_amount) allocation_amount \
from xt_partnership xp left join xt_mdf_request xmr on xp.id = xmr.partnership_id left join xt_mdf_request_history xmrh on xmrh.request_id = xmr.id \
group by  xp.vendor_company_id) \
select distinct a.partners as \"totalPartners\", coalesce(a.mdf_amount,0) as ${totalBalance}, \
coalesce(b.reimburse_amount,0) as ${usedBalance},\
(coalesce(a.mdf_amount,0)-coalesce(b.allocation_amount,0)) + (coalesce(allocation_amount,0)-coalesce(b.reimburse_amount,0))  as ${availableBalance} \
from a left join b on a.vendor_company_id= b.vendor_company_id where a.vendor_company_id=:vendorCompanyId

vendorMdfAmountTilesInfoWithPartnerFilterQuery = with a as(select xp.vendor_company_id,count(distinct partner_company_id) partners \
,sum(case when ${mdfAmountAdded}  then xmdh.mdf_amount else 0 end) - sum(case when ${mdfAmountRemoved}  then xmdh.mdf_amount else 0 end) as mdf_amount \
from xt_partnership xp left join xt_mdf_details xmd on xmd.partnership_id = xp.id left join xt_mdf_details_history xmdh on xmdh.mdf_details_id = xmd.id where xp.status = 'approved' \
and xp.id in (:partnershipIds) group by  xp.vendor_company_id),b as (select xp.vendor_company_id ,sum(xmrh.reimburse_amount) reimburse_amount,sum(xmrh.allocation_amount) allocation_amount \
from xt_partnership xp left join xt_mdf_request xmr on xp.id = xmr.partnership_id left join xt_mdf_request_history xmrh on xmrh.request_id = xmr.id and xp.id in (:partnershipIds) \
group by  xp.vendor_company_id) \
select distinct a.partners as \"totalPartners\", coalesce(a.mdf_amount,0) as ${totalBalance}, \
coalesce(b.reimburse_amount,0) as ${usedBalance},\
(coalesce(a.mdf_amount,0)-coalesce(b.allocation_amount,0)) + (coalesce(allocation_amount,0)-coalesce(b.reimburse_amount,0))  as ${availableBalance} \
from a left join b on a.vendor_company_id= b.vendor_company_id where a.vendor_company_id=:vendorCompanyId


mdfPartnersPrefixQuery = with a as(select xp.vendor_company_id, xp.partner_id,xp.partner_company_id, sum(case when ${mdfAmountAdded} then xmdh.mdf_amount else 0 end) - \
sum(case when ${mdfAmountRemoved} then xmdh.mdf_amount else 0 end) as mdf_amount, xp.id,xp.created_time, coalesce(xmd.id,0) as mdfDetailsId, xp.status from xt_partnership xp left join xt_mdf_details xmd \
on xmd.partnership_id = xp.id left join xt_mdf_details_history xmdh on xmdh.mdf_details_id = xmd.id group by xp.vendor_company_id, xp.partner_id, xp.id,xp.created_time,xmd.id), \
b as(select xp.vendor_company_id, xp.partner_id, xuu.contact_company, xup.email_id, xuu.firstname, xuu.lastname, coalesce(sum(xmrh.reimburse_amount), 0) reimburse_amount,\
coalesce(sum(xmrh.allocation_amount), 0) allocation_amount from xt_partnership xp left join xt_mdf_request xmr on xp.id = xmr.partnership_id left join xt_mdf_request_history xmrh on \
xmrh.request_id = xmr.id left join xt_user_profile xup on xup.user_id = xp.partner_id left join xt_user_userlist xuu on xup.user_id = xuu.user_id left join xt_user_list xul \
on xul.user_list_id = xuu.user_list_id and xul.company_id = xp.vendor_company_id where xul.is_partner_userlist and xul.is_default_partnerlist group by xp.vendor_company_id, \
xp.partner_id, xuu.contact_company, xup.email_id, xuu.firstname, xuu.lastname) \
select distinct  a.mdfDetailsId as ${mdfDetailsId}, coalesce(b.contact_company,'') as ${contactCompanyString}, b.email_id as  ${emailIdString},  coalesce(b.firstname,'') as  ${firstNameString}, \
 coalesce(b.lastname,'') as  ${lastNameString}, a.mdf_amount as ${totalBalance}, b.reimburse_amount as ${usedBalance}, \
(coalesce(a.mdf_amount,0)-coalesce(b.allocation_amount,0)) + (coalesce(allocation_amount,0)-coalesce(b.reimburse_amount,0)) as ${availableBalance}, a.id as \"partnershipId\", a.created_time as  ${partnershipCreatedOn} \
, a.status as \"partnerStatus\" from a left join b on a.vendor_company_id = b.vendor_company_id and a.partner_id = b.partner_id \

listParntersQuery = ${mdfPartnersPrefixQuery} \
where a.vendor_company_id = :vendorCompanyId and a.partner_company_id is not null and b.email_id is not null 

mdfPartnershipFilterQuery = and a.id in (:partnershipIds)

getMdfPartnerDetailsByPartnershipId = ${mdfPartnersPrefixQuery} where a.id = :partnershipId

getMdfPartnerDetailsByMdfDetailsId = ${mdfPartnersPrefixQuery} where a.mdfDetailsId = :mdfDetailsId

listParntersSearchQuery = \and ( LOWER(b.contact_company) like LOWER('%searchKey%') or LOWER(b.email_id) like LOWER('%searchKey%') or LOWER(b.firstname) like LOWER('%searchKey%')  \
or LOWER(b.lastname) like LOWER('%searchKey%'))

parntershipCreatedOnSortQuery = \order by a.created_time \

partnerCompanyNameSortQuery = \order by ${contactCompanyString} \

partnerEmailIdSortQuery = \order by ${emailIdString} \

partnerFistNameSortQuery = \order by ${firstNameString} \

partnerLastNameSortQuery = \order by ${lastNameString} \

################Partner MDF Amount Ties#######################


partnerMdfBalancesQuery = with a as(select xp.vendor_company_id,xp.partner_company_id,sum(case when ${mdfAmountAdded} then xmdh.mdf_amount else 0 end) - \
sum(case when ${mdfAmountRemoved} then xmdh.mdf_amount else 0 end) as mdf_amount from xt_partnership xp left join xt_mdf_details xmd on xmd.partnership_id = xp.id \
left join xt_mdf_details_history xmdh on xmdh.mdf_details_id = xmd.id group by  xp.vendor_company_id,xp.partner_company_id), \
b as (select xp.vendor_company_id,xp.partner_company_id,sum(xmrh.reimburse_amount) reimburse_amount,sum(xmrh.allocation_amount ) allocation_amount  \
from xt_partnership xp left join xt_mdf_request xmr on xp.id = xmr.partnership_id \
left join xt_mdf_request_history xmrh on xmrh.request_id = xmr.id where xp.vendor_company_id = :vendorCompanyId \
group by xp.vendor_company_id,xp.partner_company_id) \
select distinct coalesce(a.mdf_amount,0) as ${totalBalance},coalesce(b.reimburse_amount,0) as ${usedBalance}, \
(coalesce(a.mdf_amount,0)-coalesce(b.allocation_amount,0)) + (coalesce(allocation_amount,0)-coalesce(b.reimburse_amount,0)) as ${availableBalance} \
from a left join b on a.vendor_company_id = b.vendor_company_id and a.partner_company_id = b.partner_company_id \
where a.vendor_company_id=:vendorCompanyId and a.partner_company_id=:partnerCompanyId 


#############MDF Requests#####################
vendorMdfRequestTilesQuery = select count(distinct xp.partner_id) as \"totalPartners\" ,count(distinct xmr.id) as \"totalRequests\" \
,sum(case when xl.label_type=8 and xl.is_default_column=true then cast(xfsc.value as decimal) end)/count(distinct xmr.id) as \"averageRequestSize\" \
,coalesce(sum(case when xl.label_type=8 and xl.is_default_column=true  then cast(xfsc.value as decimal) end),0) as \"totalValue\"  \
from xt_partnership xp left join xt_mdf_request xmr on xp.id = xmr.partnership_id left join xt_form_submit xfs on xfs.request_id= xmr.id \
left join xt_form_submit_single_choice xfsc on xfsc.form_submit_id = xfs.id left join xt_form_label xl on  xl.id= xfsc.form_label_id \
where xp.vendor_company_id =:vendorCompanyId  and xp.status = 'approved' and xp.partner_company_id is not null

mdfRequestPartnerTilesQueryWithOutVanityFilter = select count(distinct xmr.id) as \"totalRequests\" \
,coalesce(sum(case when xl.label_type=8 and xl.is_default_column=true then cast(xfsc.value as decimal) end)/count(distinct xmr.id),0) as \"averageRequestSize\" \
,coalesce(sum(case when xl.label_type=8 and xl.is_default_column=true  then cast(xfsc.value as decimal) end),0) as \"totalValue\"  \
from xt_partnership xp left join xt_mdf_request xmr on xp.id = xmr.partnership_id \
left join xt_form_submit xfs on xfs.request_id= xmr.id \
left join xt_form_submit_single_choice xfsc on xfsc.form_submit_id = xfs.id \
left join xt_form_label xl on  xl.id= xfsc.form_label_id \
where  xp.partner_company_id=:partnerCompanyId

mdfRequestPartnerTilesQueryWithVanityFilter = ${mdfRequestPartnerTilesQueryWithOutVanityFilter}  and xp.vendor_company_id = :vendorCompanyId

listMdfAccessVendorsQuery =  select p.id as \"partnershipId\",p.created_time as \"createdOn\", cp.company_id  as \"companyId\",cp.company_name  as \"companyName\",cp.company_profile_name  as \"companyProfileName\",cp.company_logo  as \"companyLogoPath\",count(m.id) as  \"requestsCount\"  \
 from xt_partnership p left join xt_module_access ma on p.vendor_company_id = ma.company_id \
 left join xt_mdf_request m on m.partnership_id = p.id left join xt_company_profile cp on cp.company_id = p.vendor_company_id \
 where  p.status = 'approved' and  ma.mdf = true  and  p.partner_company_id = :partnerCompanyId 
 
listMdfAccessVendorCompanyIdParameter = \ and p.vendor_company_id=:vendorCompanyId \
 
listMdfAccessVendorsGroupByQuery = \ group by p.id,cp.company_id,cp.company_name,cp.company_profile_name, cp.company_logo \
 
listMdfAccessVendorsCreatedTimeSortQuery = \ order by p.created_time \
 
listMdfAccessVendorsRequestsCountSortQuery = \order by count(m.id)  \
 
listMdfAccessVendorsCompanyNameSortQuery = \order by cp.company_name  \
 
listMdfAccessVendorsSearchQuery = \and ( LOWER(cp.company_name) like LOWER('%searchKey%') or LOWER(cp.company_profile_name) like LOWER('%searchKey%'))
 
 #Mdf Form Analytics
 
 contactCompanyNameQuery = select contact_company from xt_user_userlist where user_list_id = \
(select user_list_id from xt_user_list where is_default_partnerlist and company_id \
 = (select vendor_company_id from xt_partnership where id = :partnershipId)) and user_id = (select partner_id from xt_partnership where id = :partnershipId) \
 
 contactCompanyNameQueryForVendorLogin = select contact_company from xt_user_userlist where user_list_id =  \
 (select user_list_id from xt_user_list where is_default_partnerlist and company_id  = (:vendorCompanyId)) \
 and user_id = (select partner_id from xt_partnership where vendor_company_id = :vendorCompanyId and \
 partner_company_id = ( select company_id from xt_user_profile where user_id = :createdBy))
 
 
requestDetailsByFormSubmitIdQuery = select u.email_id,r.status,r.created_time,c.company_logo,r.created_by,r.id,r.partnership_id from xt_mdf_request r,xt_user_profile u,xt_company_profile c,xt_form_submit fs \
where u.user_id =r.created_by and  u.company_id = c.company_id and fs.request_id = r.id and fs.id = :formSubmitId

mdfRequestFormDetailsQuery = select fss.value from xt_mdf_request r,xt_form_submit fs,xt_form_submit_single_choice fss, \
xt_form_label fl where fs.request_id = r.id and fss.form_submit_id = fs.id and fss.form_label_id = fl.id \
and r.id = :requestId and fl.label_type in (1,7,8) and fl.is_default_column = true  order by fl.label_type asc


mdfRequestOwnerNameAndCompanyQuery = select xuu.user_id, xuu.firstname ||' '|| xuu.lastname as fullName,xuu.contact_company as contactCompany from xt_user_userlist xuu, \
xt_user_list xu where xu.company_id = :vendorCompanyId and xu.is_default_partnerlist = true and xu.user_list_id = xuu.user_list_id and xuu.user_id \
in (:userIds)

mdfDetailsTimeLineHistoryQueryOld = select u.email_id as ${emailIdString},${fullNameContact} as ${fullNameString},u.profile_image as ${profilePicturePath}, \
h.mdf_amount as ${mdfAmount},h.allocation_date as ${allocationDate}, h.expiration_date as ${expirationDate},h.mdf_amount_type as ${mdfAmountType},\
h.description as ${description},h.created_time as ${createdTime} \
from xt_user_profile u,xt_mdf_details_history h where   h.created_by = u.user_id and h.mdf_details_id = :mdfDetailsId order by h.created_time desc

mdfDetailsTimeLineHistoryQuery =  select u.email_id as ${creatorEmailId},${fullNameContact} as ${creatorFullName},u.profile_image as ${creatorProfilePicturePath}, \
 u1.email_id as ${updaterEmailId},u1.firstname||' '||u1.lastname as  ${updaterFullName},u1.profile_image as ${updaterProfilePicturePath},h.mdf_amount as ${mdfAmount},h.allocation_date as ${allocationDate}, h.expiration_date as ${expirationDate}, \
 h.mdf_amount_type as ${mdfAmountType},h.description as ${description},h.created_time as ${createdTime},h.updated_time as ${updatedTime}  from xt_mdf_details_history h left join xt_user_profile u \
  on h.created_by =  u.user_id left join xt_user_profile u1 on u1.user_id = h.updated_by  where h.mdf_details_id = :mdfDetailsId order by h.updated_time desc nulls last
  
mdfRequestTimeLineHistoryQuery =  select u.email_id as ${creatorEmailId},${fullNameContact} as ${creatorFullName},u.profile_image as ${creatorProfilePicturePath}, \
 u1.email_id as ${updaterEmailId},u1.firstname||' '||u1.lastname as  ${updaterFullName},u1.profile_image as ${updaterProfilePicturePath}, \
 r.allocation_amount as \"allocationAmount\",r.allocation_date  as \"allocationDate\" ,r.allocation_expiration_date  as \"allocationExpirationDate\", \
r.reimburse_amount  as \"reimburseAmount\",r.status  as \"status\",r.description  as \"description\",r.created_time as ${createdTime},r.updated_time as ${updatedTime}, \
u.user_id as \"userId\", r.partnership_id as \"partnershipId\" from xt_mdf_request_history r left join xt_user_profile u \
 on r.created_by =  u.user_id left join xt_user_profile u1 on u1.user_id = r.updated_by  where r.request_id = :requestId order by r.updated_time desc nulls last
 
mdfRequestDocumentsQuery = select u.email_id as ${emailIdString},${fullNameContact} as ${fullNameString},u.profile_image as ${profilePicturePath}, \
d.file_name as ${fileName}, d.file_path_alias ${filePathAlias}, d.description as ${description}, d.uploaded_time as ${uploadedTime} from xt_mdf_request_documents d, \
xt_user_profile u where d.request_id = :requestId and d.uploaded_by = u.user_id order by d.uploaded_time desc

mdfRequestCommentsQuery = select u.email_id as ${emailIdString},${fullNameContact} as ${fullNameString},u.profile_image as ${profilePicturePath}, \
c.comment as "\comment\", c.created_time as "\createdTime\",c.company_id as "\companyId\", r.created_by as ${requestCreatedByString}, \
r.partnership_id as ${partnershipIdString}, u.user_id as ${userIdString} from xt_user_profile u,\
xt_mdf_request_comments c,xt_mdf_request r where r.id = c.request_id and \
c.commented_by = u.user_id and c.request_id = :requestId order by c.created_time asc

partnerDetailsFromPartnershipQuery = select uul.contact_company as \"companyName\",concat(uul.firstname, ' ', uul.lastname) ${fullNameString} from xt_user_list u,xt_user_userlist uul \
where company_id = (select vendor_company_id from xt_partnership where id = :partnershipId) and is_default_partnerlist and uul.user_id = :userId and uul.user_list_id = u.user_list_id


listAllRequestTitlesByPartnerShipIdQuery = select LOWER(TRIM(replace(fss.value , ' ','')))  from xt_mdf_request r,xt_form_submit fs,xt_form_submit_single_choice fss,xt_form_label fl where \
fs.request_id = r.id and fss.form_submit_id = fs.id and fss.form_label_id = fl.id and r.id in (select id from xt_mdf_request where \
partnership_id=:partnershipId) and fl.label_type in (1) and fl.is_default_column = true order by fl.label_type asc

sumOfAllocationAmountByPartnershipIdQuery = select  coalesce(sum(allocation_amount),0) from xt_mdf_request_history where partnership_id = :partnershipId

 
 










	 


 
 
 
 
 
 
 
 
 

 


